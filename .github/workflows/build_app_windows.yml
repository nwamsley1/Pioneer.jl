name: Build Windows

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
  workflow_call:
    outputs:
      version:
        description: 'Build version'
        value: ${{ jobs.build.outputs.version }}

jobs:
  build:
    name: Build & Package Windows
    concurrency:
      group: >-
        ${{ github.event_name == 'workflow_call' &&
            format('call-{0}-{1}-{2}', github.run_id, github.run_attempt, matrix.identifier) ||
            format('{0}-{1}-{2}', github.workflow, github.ref_name, matrix.identifier) }}
      cancel-in-progress: true
    runs-on: windows-latest
    env:
      JULIA_NUM_THREADS: auto
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x64
            identifier: windows-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Determine VERSION
        id: get_version
        uses: ./.github/actions/determine-version
        with:
          fallback: "dev"

      - name: Normalize versions
        id: norm
        uses: ./.github/actions/normalize-versions
        with:
          raw: ${{ steps.get_version.outputs.version }}

      - name: Setup Julia
        uses: julia-actions/setup-julia@v2
        with:
          version: '1.11'
          arch: ${{ matrix.arch }}

      - name: Cache Julia packages
        uses: actions/cache@v4
        with:
          path: |
            C:\Users\runneradmin\.julia\registries
            C:\Users\runneradmin\.julia\packages
          key: julia-windows-${{ matrix.identifier }}-${{ hashFiles('**/Project.toml','**/Manifest.toml') }}
          restore-keys: julia-windows-${{ matrix.identifier }}-

      - name: Install dependencies
        shell: bash
        run: |
          julia --project=. -e 'using Pkg; Pkg.add("PackageCompiler"); Pkg.instantiate()'

      - name: Precompile data (cache & download)
        uses: ./.github/actions/precompile-data
        with:
          cache-key: precompile-data-v1

      - name: Compile application
        shell: bash
        run: |
          julia --project=. -e '
            using PackageCompiler;
            create_app(
              ".",
              "build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/",
              incremental=false,
              force=true,
              executables=[
                "GetSearchParams"=>"main_GetSearchParams",
                "GetBuildLibParams"=>"main_GetBuildLibParams",
                "GetParseSpecLibParams"=>"main_GetParseSpecLibParams",
                "ParseSpecLib"=>"main_ParseSpecLib",
                "BuildSpecLib"=>"main_BuildSpecLib",
                "SearchDIA"=>"main_SearchDIA",
                "convertMzML"=>"main_convertMzML"
              ],
              precompile_execution_file="src/build/snoop.jl"
            );
          '

      - name: Download PioneerConverter
        shell: pwsh
        run: |
          $dir = "converter"
          New-Item -ItemType Directory -Force -Path $dir | Out-Null
          $pattern = "win-x64"
          $headers = @{ Accept = 'application/vnd.github+json'; Authorization = 'Bearer ${{ github.token }}' }
          $json = Invoke-WebRequest -Uri https://api.github.com/repos/nwamsley1/PioneerConverter/releases/latest -Headers $headers |
                  Select-Object -ExpandProperty Content | ConvertFrom-Json
          $asset = ($json.assets | Where-Object { $_.name -like "*$pattern*.zip" } | Select-Object -First 1).name
          if (-not $asset) {
            Write-Error "Error: ASSET not found"
            exit 1
          }
          Invoke-WebRequest -Uri "https://github.com/nwamsley1/PioneerConverter/releases/latest/download/$asset" -OutFile converter.zip
          Expand-Archive -Path converter.zip -DestinationPath $dir
          $subdir = Get-ChildItem -Path $dir -Directory | Select-Object -First 1
          Copy-Item "$($subdir.FullName)\bin\*" "build\Pioneer_${{ matrix.identifier }}\Applications\Pioneer\bin\" -Recurse
          New-Item -ItemType Directory -Force -Path "build\Pioneer_${{ matrix.identifier }}\Applications\Pioneer\lib" | Out-Null
          Copy-Item "$($subdir.FullName)\lib\*" "build\Pioneer_${{ matrix.identifier }}\Applications\Pioneer\lib\" -Recurse

      - name: Add wrapper scripts
        shell: pwsh
        run: |
          Copy-Item src\build\CLI\pioneer.bat build\Pioneer_${{ matrix.identifier }}/Applications/Pioneer/

      - name: Pre-download artifacts
        shell: pwsh
        run: |
          $pioneerRoot = "build\Pioneer_${{ matrix.identifier }}\Applications\Pioneer"
          $dummy = "$pioneerRoot\dummy"
          New-Item -ItemType Directory -Force -Path $dummy | Out-Null
          & "$pioneerRoot\pioneer.bat" params-predict $dummy dummy $dummy --params-path "$dummy\params.json"
          Remove-Item -Recurse -Force $dummy

      - name: Normalize version for MSI
        id: semver
        shell: pwsh
        run: |
          $raw = '${{ steps.get_version.outputs.version }}'

          # strip leading 'v' / 'V'
          $clean = $raw -replace '^[vV]', ''

          # drop prerelease/build metadata (e.g. -rc.1, +build)
          $clean = $clean.Split('+')[0]
          $clean = $clean.Split('-')[0]

          # pad/trim to 3â€“4 numeric fields for MSI (x.y.z[.w])
          $parts = $clean.Split('.')
          if ($parts.Count -lt 3) {
            $clean = ($parts + @('0','0'))[0..2] -join '.'
          } elseif ($parts.Count -gt 4) {
            $clean = $parts[0..3] -join '.'
          }

          "msi_version=$clean" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Host "MSI_VERSION=$clean"

      - name: Package Windows MSI
        shell: pwsh
        run: |
          $pioneerRoot = "build\Pioneer_${{ matrix.identifier }}\Applications\Pioneer"
          $dataDir = "$pioneerRoot\data"
          New-Item -ItemType Directory -Force -Path $dataDir | Out-Null
          Copy-Item assets\* $dataDir -Recurse
          Copy-Item "src\build\windows\LICENSE.rtf" "$pioneerRoot\LICENSE.rtf"
          $artifactDir = "$pioneerRoot\share\julia\artifacts"
          if (Test-Path $artifactDir) {
            Get-ChildItem -Path $artifactDir -Recurse -Directory |
              Where-Object {
                $_.FullName -like "*QtQuick*" -or
                $_.FullName -like "*Qt6*"     -or
                $_.Name -eq "include"         -or
                $_.Name -eq "test"            -or
                $_.Name -eq ".qt"             -or
                $_.FullName.Length -gt 200
              } |
              Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
          }
          $info = Get-Content src\build\package_info.json | ConvertFrom-Json
          $desc       = $info.description
          $identifier = $info.identifier

          & heat.exe dir $pioneerRoot `
            -cg ProductComponents `
            -dr INSTALLFOLDER `
            -platform x64 `
            -gg -scom -sreg -sfrag -srd `
            -var var.SourceDir `
            -out components.wxs

          & candle.exe `
            -dSourceDir="$pioneerRoot" `
            -dProductVersion="${{ steps.norm.outputs.msi }}" `
            -dProductDescription="$desc" `
            -dPackageIdentifier="$identifier" `
            -dPlatform="x64" `
            -arch x64 `
            -ext WixUIExtension `
            -ext WixUtilExtension `
            src\build\windows\installer.wxs components.wxs

          & light.exe `
            -ext WixUIExtension `
            -ext WixUtilExtension `
            -cultures:en-us `
            -out "Pioneer-${{ steps.get_version.outputs.version }}-${{ matrix.identifier }}.msi" `
            installer.wixobj components.wixobj

      - name: Package zipped binaries
        shell: pwsh
        run: |
          $pioneerRoot = "build\Pioneer_${{ matrix.identifier }}\Applications\Pioneer"
          Compress-Archive -Path "$pioneerRoot\*" `
                           -DestinationPath "Pioneer-${{ steps.get_version.outputs.version }}-${{ matrix.identifier }}.zip"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Pioneer-${{ matrix.identifier }}
          path: |
            Pioneer-${{ steps.get_version.outputs.version }}-${{ matrix.identifier }}.msi
            Pioneer-${{ steps.get_version.outputs.version }}-${{ matrix.identifier }}.zip
