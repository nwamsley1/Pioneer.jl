name: Build & Release Linux

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.2.3)'
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  build:
    name: Build & Package Linux
    runs-on: self-hosted
    env:
      JULIA_NUM_THREADS: auto
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x64
            identifier: linux-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine VERSION
        id: get_version
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.tag }}" ]]; then
            echo "VERSION=${{ github.event.inputs.tag }}" >> "$GITHUB_OUTPUT"
          elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"
          else
            echo "VERSION=v0.0.0" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Julia
        uses: julia-actions/setup-julia@v2
        with:
          version: '1.11'

      - name: Cache Julia packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.julia/registries
            ~/.julia/packages
          key: julia-linux-${{ matrix.identifier }}-${{ hashFiles('**/Project.toml','**/Manifest.toml') }}
          restore-keys: julia-linux-${{ matrix.identifier }}-

      - name: Install dependencies
        run: |
          julia --project=. -e 'using Pkg; Pkg.add("PackageCompiler"); Pkg.instantiate()'

      - name: Precompile data (cache & download)
        uses: ./.github/actions/precompile-data
        with:
          cache-key: precompile-data-v1

      - name: Compile application
        run: |
          julia --project=. -e '
            using PackageCompiler;
            create_app(
              ".",
              "build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/",
              incremental=false, force=true,
              executables=[
                "GetSearchParams"=>"main_GetSearchParams",
                "GetBuildLibParams"=>"main_GetBuildLibParams",
                "GetParseSpecLibParams"=>"main_GetParseSpecLibParams",
                "ParseSpecLib"=>"main_ParseSpecLib",
                "BuildSpecLib"=>"main_BuildSpecLib",
                "SearchDIA"=>"main_SearchDIA",
                "convertMzML"=>"main_convertMzML"
              ],
              precompile_execution_file="src/build/snoop.jl"
            );
          '

      - name: Download PioneerConverter
        shell: bash
        run: |
          mkdir -p converter
          PATTERN="${{ matrix.identifier }}"
          ASSET=$(curl -sL https://api.github.com/repos/nwamsley1/PioneerConverter/releases/latest \
            | jq -r --arg PATTERN "$PATTERN" '.assets[]
              | select(.name|test("PioneerConverter-"+$PATTERN+".*\\.zip"))
              | .name' | head -n1)
          if [[ -z "$ASSET" ]]; then
            echo "ERROR: No asset for $PATTERN" >&2
            exit 1
          fi
          curl -L "https://github.com/nwamsley1/PioneerConverter/releases/latest/download/$ASSET" \
            -o converter.zip
          unzip -q converter.zip -d converter
          cp -r "converter/PioneerConverter-${PATTERN}/bin/"* \
            "build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/bin/"
          mkdir -p "build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/lib"
          cp -r "converter/PioneerConverter-${PATTERN}/lib/"* \
            "build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/lib/"

      - name: Add wrapper scripts
        shell: bash
        run: |
          cp src/build/CLI/pioneer \
            build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/
          chmod +x build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/pioneer

      - name: Package Linux .deb
        run: |
          mkdir -p deb/usr/local/Pioneer
          cp -r build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/* deb/usr/local/Pioneer/
          mkdir -p deb/usr/local/Pioneer/data
          cp -r assets/* deb/usr/local/Pioneer/data/
          mkdir -p deb/usr/local/bin
          ln -sf ../Pioneer/pioneer deb/usr/local/bin/pioneer
          chmod -R a+rwx deb/usr/local/Pioneer/share/julia
          info=src/build/package_info.json
          PACKAGE=$(jq -r '.package' $info)
          MAINTAINER=$(jq -r '.maintainer' $info)
          DESCRIPTION=$(jq -r '.description' $info)
          VERSION_WITH_V="${{ steps.get_version.outputs.VERSION }}"
          VERSION=${VERSION_WITH_V#v}
          mkdir -p deb/DEBIAN
          cat <<EOF > deb/DEBIAN/control
          Package: $PACKAGE
          Version: $VERSION
          Architecture: amd64
          Maintainer: $MAINTAINER
          Description: $DESCRIPTION
          EOF
          dpkg-deb --build --root-owner-group deb \
            Pioneer-${{ steps.get_version.outputs.VERSION }}-${{ matrix.identifier }}.deb

      - name: Package zipped binaries
        run: |
          cd build/Pioneer_${{ matrix.identifier }}/Applications
          zip -qr ../../../Pioneer-${{ steps.get_version.outputs.VERSION }}-${{ matrix.identifier }}.zip Pioneer

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Pioneer-${{ steps.get_version.outputs.VERSION }}-${{ matrix.identifier }}
          path: |
            Pioneer-${{ steps.get_version.outputs.VERSION }}-${{ matrix.identifier }}.deb
            Pioneer-${{ steps.get_version.outputs.VERSION }}-${{ matrix.identifier }}.zip

  release:
    name: Publish GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: >
      needs.build.outputs.version != '0.0.0' && (
        (github.event_name == 'push'       && startsWith(github.ref, 'refs/tags/')) ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.tag != '')
      )
    permissions:
      contents: write
      actions:  read

    steps:
      - name: Publish Release
        uses: ./.github/actions/publish-release
        with:
          version: ${{ needs.build.outputs.version }}
