name: Build macOS

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
  workflow_call:
    outputs:
      version:
        description: 'Build version'
        value: ${{ jobs.build.outputs.version }}

jobs:
  build:
    name: Build & Package macOS
    concurrency:
      group: >-
        ${{ github.event_name == 'workflow_call' &&
            format('call-{0}-{1}-{2}', github.run_id, github.run_attempt, matrix.identifier) ||
            format('{0}-{1}-{2}', github.workflow, github.ref_name, matrix.identifier) }}
      cancel-in-progress: true
    runs-on: ${{ matrix.runner }}
    env:
      JULIA_NUM_THREADS: auto
      MACOS_CERT_P12: ${{ secrets.MACOS_CERT_P12 }}
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x64
            runner: macos-15-intel
            identifier: macos-x64
          - arch: arm64
            runner: macos-latest
            identifier: macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Determine VERSION
        id: get_version
        uses: ./.github/actions/determine-version
        with:
          fallback: "dev"

      - name: Normalize versions
        id: norm
        uses: ./.github/actions/normalize-versions
        with:
          raw: ${{ steps.get_version.outputs.version }}

      - name: Setup Julia
        uses: julia-actions/setup-julia@v2
        with:
          version: '1.11'
          arch: ${{ matrix.arch }}

      - name: Cache Julia packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.julia/registries
            ~/.julia/packages
          key: julia-macos-${{ matrix.identifier }}-${{ hashFiles('**/Project.toml','**/Manifest.toml') }}
          restore-keys: julia-macos-${{ matrix.identifier }}-

      - name: Install the Apple certificate and provisioning profile
        if: github.event_name != 'pull_request' && env.MACOS_CERT_P12 != ''
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERT_P12 }}
          P12_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
          INSTALLER_CERT_BASE64: ${{ secrets.MACOS_INSTALLER_CERT_P12 }}
          INSTALLER_CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
          NOTARIZE_APPLE_ID: ${{ secrets.NOTARIZE_APPLE_ID }}
          NOTARIZE_PASSWORD: ${{ secrets.NOTARIZE_PASSWORD }}
          NOTARIZE_TEAM_ID: ${{ secrets.NOTARIZE_TEAM_ID }}
          CODESIGN_IDENTITY: ${{ secrets.CODESIGN_IDENTITY }}
          PKG_SIGN_IDENTITY: ${{ secrets.PKG_SIGN_IDENTITY }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          INSTALLER_CERT_PATH=$RUNNER_TEMP/installer_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_NAME=app-signing.keychain-db
          KEYCHAIN_PATH="$RUNNER_TEMP/$KEYCHAIN_NAME"

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          echo -n "$INSTALLER_CERT_BASE64" | base64 --decode -o $INSTALLER_CERT_PATH

          if [[ -z "${CODESIGN_IDENTITY}" ]]; then
            echo "Error: CODESIGN_IDENTITY is not set or empty."
            exit 1
          fi

          if [[ -z "${PKG_SIGN_IDENTITY}" ]]; then
            echo "Error: PKG_SIGN_IDENTITY is not set or empty."
            exit 1
          fi

          security list-keychains -d user -s login.keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security list-keychains -d user -s "$KEYCHAIN_PATH" $(security list-keychains -d user | sed s/\"//g)
          security default-keychain -d user -s "$KEYCHAIN_PATH"
          security set-keychain-settings "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          security import "$CERTIFICATE_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH" \
            -T "/usr/bin/codesign" -T "/usr/bin/productsign"
          security import "$INSTALLER_CERT_PATH" -P "$INSTALLER_CERT_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH" \
            -T "/usr/bin/codesign" -T "/usr/bin/productsign"

          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" -D "$CODESIGN_IDENTITY" -t private "$KEYCHAIN_PATH"
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" -D "$PKG_SIGN_IDENTITY" -t private "$KEYCHAIN_PATH"

          {
            echo "KEYCHAIN_PATH=$KEYCHAIN_PATH"
            echo "KEYCHAIN_NAME=$KEYCHAIN_NAME"
          } >> "$GITHUB_ENV"

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - uses: apple-actions/import-codesign-certs@v5
        if: github.event_name != 'pull_request' && env.MACOS_CERT_P12 != ''
        with:
          p12-file-base64:   ${{ secrets.MACOS_CERT_P12 }}
          p12-password:      ${{ secrets.MACOS_CERT_PASSWORD }}
          keychain-password: ${{ secrets.MACOS_CERT_PASSWORD }}
          keychain:          signing_temp

      - uses: apple-actions/import-codesign-certs@v5
        if: github.event_name != 'pull_request' && env.MACOS_CERT_P12 != ''
        with:
          p12-file-base64:   ${{ secrets.MACOS_INSTALLER_CERT_P12 }}
          p12-password:      ${{ secrets.MACOS_CERT_PASSWORD }}
          keychain-password: ${{ secrets.MACOS_CERT_PASSWORD }}
          keychain:          signing_temp
          create-keychain:   false

      - name: Install dependencies
        run: |
          julia --project=. -e 'using Pkg; Pkg.add("PackageCompiler"); Pkg.instantiate()'

      - name: Precompile data (cache & download)
        uses: ./.github/actions/precompile-data
        with:
          cache-key: precompile-data-v1

      - name: Compile application
        run: |
          julia --project=. -e '
            using PackageCompiler;
            create_app(
              ".",
              "build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/",
              incremental=false,
              force=true,
              executables=[
                "GetSearchParams"=>"main_GetSearchParams",
                "GetBuildLibParams"=>"main_GetBuildLibParams",
                "GetParseSpecLibParams"=>"main_GetParseSpecLibParams",
                "ParseSpecLib"=>"main_ParseSpecLib",
                "BuildSpecLib"=>"main_BuildSpecLib",
                "SearchDIA"=>"main_SearchDIA",
                "convertMzML"=>"main_convertMzML"
              ],
              precompile_execution_file="src/build/snoop.jl"
            );
          '

      - name: Download PioneerConverter
        shell: bash
        run: |
          mkdir -p converter
          if [[ "${{ matrix.identifier }}" == "macos-x64" ]]; then
            PATTERN="osx-x64"
          else
            PATTERN="osx-arm64"
          fi
          ASSET=$(curl -fsSL \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.token }}" \
            https://api.github.com/repos/nwamsley1/PioneerConverter/releases/latest \
            | jq -r --arg PATTERN "$PATTERN" '.assets[]
              | select(.name | test("PioneerConverter-"+$PATTERN+".*\\.zip"))
              | .name' | head -n1)

          if [[ -z "$ASSET" ]]; then
            echo "Error: ASSET not found"
            exit 1
          fi

          curl -L "https://github.com/nwamsley1/PioneerConverter/releases/latest/download/$ASSET" \
            -o converter.zip
          unzip -q converter.zip -d converter
          cp -r "converter/PioneerConverter-${PATTERN}/bin/"* \
            "build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/bin/"
          mkdir -p "build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/lib"
          cp -r "converter/PioneerConverter-${PATTERN}/lib/"* \
            "build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/lib/"

      - name: Add wrapper scripts
        run: |
          cp src/build/CLI/pioneer \
            build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/
          chmod +x build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/pioneer

      - name: Codesign & package macOS app (release tags only)
        if: github.event_name != 'pull_request' && env.MACOS_CERT_P12 != '' && startsWith(github.ref, 'refs/tags/v')
        env:
          CODESIGN_IDENTITY: ${{ secrets.CODESIGN_IDENTITY }}
          PKG_SIGN_IDENTITY: ${{ secrets.PKG_SIGN_IDENTITY }}
        run: |
          set -o pipefail

          # Helper function: retry codesign with exponential backoff
          codesign_with_retry() {
            local target="$1"
            local max_attempts=5
            local attempt=1
            local wait_time=2

            while [ "$attempt" -le "$max_attempts" ]; do
              if codesign --deep --force --options runtime \
                --timestamp \
                --entitlements src/build/osx/entitlements.plist \
                --sign "$CODESIGN_IDENTITY" "$target" 2>&1; then
                return 0
              fi

              if [ "$attempt" -lt "$max_attempts" ]; then
                echo "Codesign attempt $attempt failed for $target, retrying in ${wait_time}s..."
                sleep "$wait_time"
                wait_time=$((wait_time * 2))
                attempt=$((attempt + 1))
              else
                echo "Codesign failed after $max_attempts attempts for $target"
                return 1
              fi
            done
          }

          APP="Pioneer"
          DIST="build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer"
          PKGROOT="pkgroot"
          VERSION='${{ steps.norm.outputs.pkg }}'

          echo "Starting codesigning at $(date)"

          rm -rf "$PKGROOT"
          mkdir -p "$PKGROOT/usr/local/$APP"
          cp -R "$DIST"/* "$PKGROOT/usr/local/$APP/"
          mkdir -p "$PKGROOT/usr/local/$APP/data"
          cp -R assets/* "$PKGROOT/usr/local/$APP/data/" || true
          chmod -R a+w "$PKGROOT/usr/local/$APP/share/julia" || true

          # Sign every file with retry
          while IFS= read -r -d '' f; do
            codesign_with_retry "$f" || exit 1
          done < <(find "$PKGROOT/usr/local/$APP" -type f -print0)

          mkdir -p "$PKGROOT/usr/local/bin"
          ln -sf /usr/local/Pioneer/pioneer "$PKGROOT/usr/local/bin/pioneer"

          IDENTIFIER=$(jq -r '.identifier' src/build/package_info.json)

          pkgbuild --root "$PKGROOT" \
                  --identifier "$IDENTIFIER" \
                  --version "$VERSION" \
                  --install-location / PioneerUnsigned.pkg

          productsign \
            --keychain "$KEYCHAIN" \
            --timestamp=none \ 
            --sign "$PKG_SIGN_IDENTITY" \
            PioneerUnsigned.pkg \
            "Pioneer-${{ steps.get_version.outputs.version }}-${{ matrix.identifier }}.pkg"

          rm PioneerUnsigned.pkg


      - name: Notarize macOS package (release tags only)
        if: github.event_name != 'pull_request' && env.MACOS_CERT_P12 != '' && startsWith(github.ref, 'refs/tags/v')
        timeout-minutes: 240
        env:
          AC_USERNAME: ${{ secrets.NOTARIZE_APPLE_ID }}
          AC_PASSWORD: ${{ secrets.NOTARIZE_PASSWORD }}
          TEAM_ID:    ${{ secrets.NOTARIZE_TEAM_ID }}
        run: |
          echo "Starting notarization at $(date)"
          xcrun notarytool store-credentials notary-profile \
            --apple-id "$AC_USERNAME" --team-id "$TEAM_ID" \
            --password "$AC_PASSWORD"

          echo "Submitting package for notarization at $(date)"
          result=$(xcrun notarytool submit \
                     Pioneer-${{ steps.get_version.outputs.version }}-${{ matrix.identifier }}.pkg \
                     --keychain-profile notary-profile \
                     --wait --output-format json 2>&1) || {
            echo "Notarization command failed or timed out at $(date)"
            echo "Result: $result"
            exit 1
          }

          echo "Notarization completed at $(date)"
          status=$(echo "$result" | jq -r .status)
          subid=$(echo "$result" | jq -r .id)
          echo "Notarization status: $status"
          echo "Submission ID: $subid"

          if [[ "$status" != "Accepted" ]]; then
            echo "Notarization failed: $status"
            xcrun notarytool log "$subid" --keychain-profile notary-profile
            exit 1
          fi
          echo "Notarization successful at $(date)"

      - name: Staple notarization ticket (release tags only)
        if: github.event_name != 'pull_request' && env.MACOS_CERT_P12 != '' && startsWith(github.ref, 'refs/tags/v')
        run: |
          xcrun stapler staple \
            Pioneer-${{ steps.get_version.outputs.version }}-${{ matrix.identifier }}.pkg

      - name: Package zipped binaries
        run: |
          cd build/Pioneer_${{ matrix.identifier }}/Applications
          zip -qr ../../../Pioneer-${{ steps.get_version.outputs.version }}-${{ matrix.identifier }}.zip Pioneer

      - name: Validate signed pkg (release tags only)
        if: github.event_name != 'pull_request' && env.MACOS_CERT_P12 != '' && startsWith(github.ref, 'refs/tags/v')
        run: |
          PKG="Pioneer-${{ steps.get_version.outputs.version }}-${{ matrix.identifier }}.pkg"
          echo "Validating pkg with spctl: $PKG"
          spctl -a -vv -t install "$PKG"

      - name: Clean up temporary signing keychain
        if: always() && github.event_name != 'pull_request' && env.MACOS_CERT_P12 != ''
        run: |
          if [[ -n "${KEYCHAIN_PATH:-}" ]]; then
            security delete-keychain "$KEYCHAIN_PATH" || true
          fi
          security default-keychain -d user -s login.keychain
          security list-keychains -d user -s login.keychain

      - name: Upload zipped binaries
        uses: actions/upload-artifact@v4
        with:
          name: Pioneer-${{ matrix.identifier }}
          path: Pioneer-${{ steps.get_version.outputs.version }}-${{ matrix.identifier }}.zip

      - name: Upload signed package (release tags only)
        if: github.event_name != 'pull_request' && env.MACOS_CERT_P12 != '' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: Pioneer-${{ matrix.identifier }}-pkg
          path: Pioneer-${{ steps.get_version.outputs.version }}-${{ matrix.identifier }}.pkg
