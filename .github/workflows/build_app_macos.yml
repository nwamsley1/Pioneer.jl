name: Build macOS

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
  workflow_call:
    outputs:
      version:
        description: 'Build version'
        value: ${{ jobs.build.outputs.version }}

jobs:
  build:
    name: Build & Package macOS
    concurrency:
      group: >-
        ${{ github.event_name == 'workflow_call' &&
            format('call-{0}-{1}-{2}', github.run_id, github.run_attempt, matrix.identifier) ||
            format('{0}-{1}-{2}', github.workflow, github.ref_name, matrix.identifier) }}
      cancel-in-progress: true
    runs-on: ${{ matrix.runner }}
    env:
      JULIA_NUM_THREADS: auto
      MACOS_CERT_P12: ${{ secrets.MACOS_CERT_P12 }}
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x64
            runner: macos-13
            identifier: macos-x64
          - arch: arm64
            runner: macos-latest
            identifier: macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Determine VERSION
        id: get_version
        uses: ./.github/actions/determine-version
        with:
          fallback: "dev"

      - name: Normalize versions
        id: norm
        uses: ./.github/actions/normalize-versions
        with:
          raw: ${{ steps.get_version.outputs.version }}

      - name: Setup Julia
        uses: julia-actions/setup-julia@v2
        with:
          version: '1.11'
          arch: ${{ matrix.arch }}

      - name: Cache Julia packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.julia/registries
            ~/.julia/packages
          key: julia-macos-${{ matrix.identifier }}-${{ hashFiles('**/Project.toml','**/Manifest.toml') }}
          restore-keys: julia-macos-${{ matrix.identifier }}-

      - name: Install the Apple certificate and provisioning profile
        if: github.event_name != 'pull_request' && env.MACOS_CERT_P12 != ''
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERT_P12 }}
          P12_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
          INSTALLER_CERT_BASE64: ${{ secrets.MACOS_INSTALLER_CERT_P12 }}
          INSTALLER_CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
          NOTARIZE_APPLE_ID: ${{ secrets.NOTARIZE_APPLE_ID }}
          NOTARIZE_PASSWORD: ${{ secrets.NOTARIZE_PASSWORD }}
          NOTARIZE_TEAM_ID: ${{ secrets.NOTARIZE_TEAM_ID }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          INSTALLER_CERT_PATH=$RUNNER_TEMP/installer_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          echo -n "$INSTALLER_CERT_BASE64" | base64 --decode -o $INSTALLER_CERT_PATH

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $INSTALLER_CERT_PATH -P "$INSTALLER_CERT_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          security list-keychains -d user -s $KEYCHAIN_PATH login.keychain

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - uses: apple-actions/import-codesign-certs@v5
        if: github.event_name != 'pull_request' && env.MACOS_CERT_P12 != ''
        with:
          p12-file-base64:   ${{ secrets.MACOS_CERT_P12 }}
          p12-password:      ${{ secrets.MACOS_CERT_PASSWORD }}
          keychain-password: ${{ secrets.MACOS_CERT_PASSWORD }}
          keychain:          signing_temp

      - uses: apple-actions/import-codesign-certs@v5
        if: github.event_name != 'pull_request' && env.MACOS_CERT_P12 != ''
        with:
          p12-file-base64:   ${{ secrets.MACOS_INSTALLER_CERT_P12 }}
          p12-password:      ${{ secrets.MACOS_CERT_PASSWORD }}
          keychain-password: ${{ secrets.MACOS_CERT_PASSWORD }}
          keychain:          signing_temp
          create-keychain:   false

      - name: Install dependencies
        run: |
          julia --project=. -e 'using Pkg; Pkg.add("PackageCompiler"); Pkg.instantiate()'

      - name: Precompile data (cache & download)
        uses: ./.github/actions/precompile-data
        with:
          cache-key: precompile-data-v1

      - name: Compile application
        run: |
          julia --project=. -e '
            using PackageCompiler;
            create_app(
              ".",
              "build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/",
              incremental=false,
              force=true,
              executables=[
                "GetSearchParams"=>"main_GetSearchParams",
                "GetBuildLibParams"=>"main_GetBuildLibParams",
                "GetParseSpecLibParams"=>"main_GetParseSpecLibParams",
                "ParseSpecLib"=>"main_ParseSpecLib",
                "BuildSpecLib"=>"main_BuildSpecLib",
                "SearchDIA"=>"main_SearchDIA",
                "convertMzML"=>"main_convertMzML"
              ],
              precompile_execution_file="src/build/snoop.jl"
            );
          '

      - name: Download PioneerConverter
        shell: bash
        run: |
          mkdir -p converter
          if [[ "${{ matrix.identifier }}" == "macos-x64" ]]; then
            PATTERN="osx-x64"
          else
            PATTERN="osx-arm64"
          fi
          ASSET=$(curl -fsSL \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.token }}" \
            https://api.github.com/repos/nwamsley1/PioneerConverter/releases/latest \
            | jq -r --arg PATTERN "$PATTERN" '.assets[]
              | select(.name | test("PioneerConverter-"+$PATTERN+".*\\.zip"))
              | .name' | head -n1)

          if [[ -z "$ASSET" ]]; then
            echo "Error: ASSET not found"
            exit 1
          fi

          curl -L "https://github.com/nwamsley1/PioneerConverter/releases/latest/download/$ASSET" \
            -o converter.zip
          unzip -q converter.zip -d converter
          cp -r "converter/PioneerConverter-${PATTERN}/bin/"* \
            "build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/bin/"
          mkdir -p "build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/lib"
          cp -r "converter/PioneerConverter-${PATTERN}/lib/"* \
            "build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/lib/"

      - name: Add wrapper scripts
        run: |
          cp src/build/CLI/pioneer \
            build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/
          chmod +x build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/pioneer

      - name: Codesign & package macOS app
        if: github.event_name != 'pull_request' && env.MACOS_CERT_P12 != ''
        env:
          CODESIGN_IDENTITY: ${{ secrets.CODESIGN_IDENTITY }}
          PKG_SIGN_IDENTITY:  ${{ secrets.PKG_SIGN_IDENTITY }}
        run: |
          APP="Pioneer"
          DIST="build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer"
          PKGROOT="pkgroot"
          VERSION='${{ steps.norm.outputs.pkg }}'

          rm -rf "$PKGROOT"
          mkdir -p "$PKGROOT/usr/local/$APP"
          cp -R "$DIST"/* "$PKGROOT/usr/local/$APP/"
          mkdir -p "$PKGROOT/usr/local/$APP/data"
          cp -R assets/* "$PKGROOT/usr/local/$APP/data/"
          chmod -R a+w "$PKGROOT/usr/local/$APP/share/julia"

          # Codesign only code objects (frameworks, Mach-O dylibs/executables) with timestamp fallback
          # 1) Sign frameworks first (loop to avoid xargs command length limits)
          while IFS= read -r -d '' fw; do
            echo "Signing framework: $fw"
            codesign --force --options runtime --timestamp \
              --entitlements src/build/osx/entitlements.plist \
              --sign "$CODESIGN_IDENTITY" "$fw" || {
              echo "Framework timestamp failed for $fw — retrying without timestamp";
              codesign --force --options runtime \
                --entitlements src/build/osx/entitlements.plist \
                --sign "$CODESIGN_IDENTITY" "$fw"; }
          done < <(find "$PKGROOT/usr/local/$APP" -type d -name "*.framework" -print0)

          # 2) Sign Mach-O files (executables and dylibs)
          while IFS= read -r -d '' f; do
            if file "$f" | grep -E -q 'Mach-O'; then
              echo "Signing Mach-O: $f"
              codesign --force --options runtime --timestamp \
                --entitlements src/build/osx/entitlements.plist \
                --sign "$CODESIGN_IDENTITY" "$f" || {
                  echo "Timestamp failed for $f — retrying without timestamp";
                  codesign --force --options runtime \
                    --entitlements src/build/osx/entitlements.plist \
                    --sign "$CODESIGN_IDENTITY" "$f"; }
            fi
          done < <(find "$PKGROOT/usr/local/$APP" -type f -print0)

          # 3) Optionally sign the bundle root (deep) as a safety net
          codesign --deep --force --options runtime --timestamp \
            --entitlements src/build/osx/entitlements.plist \
            --sign "$CODESIGN_IDENTITY" "$PKGROOT/usr/local/$APP" || {
              echo "Top-level deep sign timestamp failed — retrying without timestamp";
              codesign --deep --force --options runtime \
                --entitlements src/build/osx/entitlements.plist \
                --sign "$CODESIGN_IDENTITY" "$PKGROOT/usr/local/$APP"; }

          # 4) Verify code signatures
          codesign --verify --deep --strict --verbose=2 "$PKGROOT/usr/local/$APP"

          mkdir -p "$PKGROOT/usr/local/bin"
          ln -sf /usr/local/Pioneer/pioneer "$PKGROOT/usr/local/bin/pioneer"

          IDENTIFIER=$(jq -r '.identifier' src/build/package_info.json)

          pkgbuild --root "$PKGROOT" \
                   --identifier "$IDENTIFIER" \
                   --version "$VERSION" \
                   --install-location / PioneerUnsigned.pkg

          productsign --sign "$PKG_SIGN_IDENTITY" \
                      PioneerUnsigned.pkg \
                      Pioneer-${{ steps.get_version.outputs.version }}-${{ matrix.identifier }}.pkg

          rm PioneerUnsigned.pkg

      - name: Notarize macOS package
        if: github.event_name != 'pull_request' && env.MACOS_CERT_P12 != ''
        env:
          AC_USERNAME: ${{ secrets.NOTARIZE_APPLE_ID }}
          AC_PASSWORD: ${{ secrets.NOTARIZE_PASSWORD }}
          TEAM_ID:    ${{ secrets.NOTARIZE_TEAM_ID }}
        run: |
          xcrun notarytool store-credentials notary-profile \
            --apple-id "$AC_USERNAME" --team-id "$TEAM_ID" \
            --password "$AC_PASSWORD"
          result=$(xcrun notarytool submit \
                     Pioneer-${{ steps.get_version.outputs.version }}-${{ matrix.identifier }}.pkg \
                     --keychain-profile notary-profile \
                     --wait --output-format json)
          status=$(echo "$result" | jq -r .status)
          subid=$(echo "$result" | jq -r .id)
          if [[ "$status" != "Accepted" ]]; then
            echo "Notarization failed: $status"
            xcrun notarytool log "$subid" --keychain-profile notary-profile
            exit 1
          fi

      - name: Staple notarization ticket
        if: github.event_name != 'pull_request' && env.MACOS_CERT_P12 != ''
        run: |
          xcrun stapler staple \
            Pioneer-${{ steps.get_version.outputs.version }}-${{ matrix.identifier }}.pkg

      - name: Package zipped binaries
        run: |
          cd build/Pioneer_${{ matrix.identifier }}/Applications
          zip -qr ../../../Pioneer-${{ steps.get_version.outputs.version }}-${{ matrix.identifier }}.zip Pioneer

      - name: Upload zipped binaries
        uses: actions/upload-artifact@v4
        with:
          name: Pioneer-${{ matrix.identifier }}
          path: Pioneer-${{ steps.get_version.outputs.version }}-${{ matrix.identifier }}.zip

      - name: Upload signed package
        if: github.event_name != 'pull_request' && env.MACOS_CERT_P12 != ''
        uses: actions/upload-artifact@v4
        with:
          name: Pioneer-${{ matrix.identifier }}-pkg
          path: Pioneer-${{ steps.get_version.outputs.version }}-${{ matrix.identifier }}.pkg
