name: Build macOS

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
  workflow_call:
    outputs:
      version:
        description: 'Build version'
        value: ${{ jobs.build.outputs.version }}

jobs:
  build:
    name: Build & Package macOS
    concurrency:
      group: >-
        ${{ github.event_name == 'workflow_call' &&
            format('call-{0}-{1}-{2}', github.run_id, github.run_attempt, matrix.identifier) ||
            format('{0}-{1}-{2}', github.workflow, github.ref_name, matrix.identifier) }}
      cancel-in-progress: true
    runs-on: ${{ matrix.runner }}
    env:
      JULIA_NUM_THREADS: auto
      MACOS_CERT_P12: ${{ secrets.MACOS_CERT_P12 }}
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x64
            runner: macos-15-intel
            identifier: macos-x64
          - arch: arm64
            runner: macos-latest
            identifier: macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Determine VERSION
        id: get_version
        uses: ./.github/actions/determine-version
        with:
          fallback: "dev"

      - name: Normalize versions
        id: norm
        uses: ./.github/actions/normalize-versions
        with:
          raw: ${{ steps.get_version.outputs.version }}

      - name: Setup Julia
        uses: julia-actions/setup-julia@v2
        with:
          version: '1.11'
          arch: ${{ matrix.arch }}

      - name: Cache Julia packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.julia/registries
            ~/.julia/packages
          key: julia-macos-${{ matrix.identifier }}-${{ hashFiles('**/Project.toml','**/Manifest.toml') }}
          restore-keys: julia-macos-${{ matrix.identifier }}-

      - name: Install the Apple certificate and provisioning profile
        if: github.event_name != 'pull_request' && env.MACOS_CERT_P12 != ''
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERT_P12 }}
          P12_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
          INSTALLER_CERT_BASE64: ${{ secrets.MACOS_INSTALLER_CERT_P12 }}
          INSTALLER_CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
          NOTARIZE_APPLE_ID: ${{ secrets.NOTARIZE_APPLE_ID }}
          NOTARIZE_PASSWORD: ${{ secrets.NOTARIZE_PASSWORD }}
          NOTARIZE_TEAM_ID: ${{ secrets.NOTARIZE_TEAM_ID }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          INSTALLER_CERT_PATH=$RUNNER_TEMP/installer_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          echo -n "$INSTALLER_CERT_BASE64" | base64 --decode -o $INSTALLER_CERT_PATH

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $INSTALLER_CERT_PATH -P "$INSTALLER_CERT_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          security list-keychains -d user -s $KEYCHAIN_PATH login.keychain

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - uses: apple-actions/import-codesign-certs@v5
        if: github.event_name != 'pull_request' && env.MACOS_CERT_P12 != ''
        with:
          p12-file-base64:   ${{ secrets.MACOS_CERT_P12 }}
          p12-password:      ${{ secrets.MACOS_CERT_PASSWORD }}
          keychain-password: ${{ secrets.MACOS_CERT_PASSWORD }}
          keychain:          signing_temp

      - uses: apple-actions/import-codesign-certs@v5
        if: github.event_name != 'pull_request' && env.MACOS_CERT_P12 != ''
        with:
          p12-file-base64:   ${{ secrets.MACOS_INSTALLER_CERT_P12 }}
          p12-password:      ${{ secrets.MACOS_CERT_PASSWORD }}
          keychain-password: ${{ secrets.MACOS_CERT_PASSWORD }}
          keychain:          signing_temp
          create-keychain:   false

      - name: Install dependencies
        run: |
          julia --project=. -e 'using Pkg; Pkg.add("PackageCompiler"); Pkg.instantiate()'

      - name: Precompile data (cache & download)
        uses: ./.github/actions/precompile-data
        with:
          cache-key: precompile-data-v1

      - name: Compile application
        run: |
          julia --project=. -e '
            using PackageCompiler;
            create_app(
              ".",
              "build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/",
              incremental=false,
              force=true,
              executables=[
                "GetSearchParams"=>"main_GetSearchParams",
                "GetBuildLibParams"=>"main_GetBuildLibParams",
                "GetParseSpecLibParams"=>"main_GetParseSpecLibParams",
                "ParseSpecLib"=>"main_ParseSpecLib",
                "BuildSpecLib"=>"main_BuildSpecLib",
                "SearchDIA"=>"main_SearchDIA",
                "convertMzML"=>"main_convertMzML"
              ],
              precompile_execution_file="src/build/snoop.jl"
            );
          '

      - name: Download PioneerConverter
        shell: bash
        run: |
          mkdir -p converter
          if [[ "${{ matrix.identifier }}" == "macos-x64" ]]; then
            PATTERN="osx-x64"
          else
            PATTERN="osx-arm64"
          fi
          ASSET=$(curl -fsSL \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.token }}" \
            https://api.github.com/repos/nwamsley1/PioneerConverter/releases/latest \
            | jq -r --arg PATTERN "$PATTERN" '.assets[]
              | select(.name | test("PioneerConverter-"+$PATTERN+".*\\.zip"))
              | .name' | head -n1)

          if [[ -z "$ASSET" ]]; then
            echo "Error: ASSET not found"
            exit 1
          fi

          curl -L "https://github.com/nwamsley1/PioneerConverter/releases/latest/download/$ASSET" \
            -o converter.zip
          unzip -q converter.zip -d converter
          cp -r "converter/PioneerConverter-${PATTERN}/bin/"* \
            "build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/bin/"
          mkdir -p "build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/lib"
          cp -r "converter/PioneerConverter-${PATTERN}/lib/"* \
            "build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/lib/"

      - name: Add wrapper scripts
        run: |
          cp src/build/CLI/pioneer \
            build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/
          chmod +x build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/pioneer

      - name: Codesign & package macOS app (release tags only)
        if: github.event_name != 'pull_request' && env.MACOS_CERT_P12 != '' && startsWith(github.ref, 'refs/tags/v')
        env:
          CODESIGN_IDENTITY: ${{ secrets.CODESIGN_IDENTITY }}
          PKG_SIGN_IDENTITY:  ${{ secrets.PKG_SIGN_IDENTITY }}
        run: |
          APP="Pioneer"
          DIST="build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer"
          PKGROOT="pkgroot"
          VERSION='${{ steps.norm.outputs.pkg }}'

          echo "Starting codesigning at $(date)"

          rm -rf "$PKGROOT"
          mkdir -p "$PKGROOT/usr/local/$APP"
          cp -R "$DIST"/* "$PKGROOT/usr/local/$APP/"
          mkdir -p "$PKGROOT/usr/local/$APP/data"
          cp -R assets/* "$PKGROOT/usr/local/$APP/data/"
          chmod -R a+w "$PKGROOT/usr/local/$APP/share/julia"

          # 1) Prune non-runtime files and clear extended attributes
          find "$PKGROOT/usr/local/$APP" -type f \( -name '*.o' -o -name '*.a' \) -delete
          find "$PKGROOT/usr/local/$APP" -type d -name 'objects-Release' -prune -exec rm -rf {} +
          # Clear quarantine attributes to avoid propagation
          xattr -rd com.apple.quarantine "$PKGROOT/usr/local/$APP" || true

          echo "Prune & signing starting for $APP"
          echo "Frameworks to sign:"
          find "$PKGROOT/usr/local/$APP" -type d -name "*.framework" | wc -l || true
          echo "App bundle binaries to sign:"
          find "$PKGROOT/usr/local/$APP" -type f -path '*/Contents/MacOS/*' | wc -l || true
          echo "CLI executables to sign:"
          if [ -d "$PKGROOT/usr/local/$APP/bin" ]; then find "$PKGROOT/usr/local/$APP/bin" -type f -perm -111 | wc -l || true; fi
          echo "Dylibs/plugins to sign:"
          find "$PKGROOT/usr/local/$APP" \( -name '*.dylib' -o -name '*.so' \) -not -path '*/.framework/*' | wc -l || true

          # Helper function: retry codesign with exponential backoff
          codesign_with_retry() {
            local target="$1"
            local max_attempts=5
            local attempt=1
            local wait_time=2

            while [ $attempt -le $max_attempts ]; do
              if codesign --force --options runtime \
                --entitlements src/build/osx/entitlements.plist \
                --sign "$CODESIGN_IDENTITY" "$target" 2>&1; then
                return 0
              fi

              if [ $attempt -lt $max_attempts ]; then
                echo "Codesign attempt $attempt failed for $target, retrying in ${wait_time}s..."
                sleep $wait_time
                wait_time=$((wait_time * 2))
                attempt=$((attempt + 1))
              else
                echo "Codesign failed after $max_attempts attempts for $target"
                return 1
              fi
            done
          }

          # 2) Sign frameworks (bundle directories)
          echo "Signing frameworks at $(date)"
          find "$PKGROOT/usr/local/$APP" -type d -name "*.framework" -print0 | \
          while IFS= read -r -d '' fw; do
            echo "Signing framework: $fw"
            codesign_with_retry "$fw"
          done

          # 3) Sign app bundle executables (Contents/MacOS)
          echo "Signing app bundles at $(date)"
          find "$PKGROOT/usr/local/$APP" -type f -path '*/Contents/MacOS/*' -print0 | \
          while IFS= read -r -d '' f; do
            echo "Signing app binary: $f"
            codesign_with_retry "$f"
          done

          # 4) Sign CLI executables in bin/
          echo "Signing CLI executables at $(date)"
          if [ -d "$PKGROOT/usr/local/$APP/bin" ]; then
            find "$PKGROOT/usr/local/$APP/bin" -type f -perm -111 -print0 | \
            while IFS= read -r -d '' f; do
              echo "Signing CLI: $f"
              codesign_with_retry "$f"
            done
          fi

          # 5) Sign dylibs and plugins (exclude files inside frameworks)
          echo "Signing dylibs/plugins at $(date)"
          find "$PKGROOT/usr/local/$APP" \( -name '*.dylib' -o -name '*.so' \) -not -path '*/.framework/*' -print0 | \
          while IFS= read -r -d '' f; do
            echo "Signing dylib/plugin: $f"
            codesign_with_retry "$f"
          done

          # 6) Verify code signatures on actual code objects (not plain directories)
          echo "Verifying signed frameworks at $(date)"
          find "$PKGROOT/usr/local/$APP" -type d -name "*.framework" -print0 | \
          while IFS= read -r -d '' fw; do
            echo "Verify framework: $fw"
            codesign --verify --strict --verbose=2 "$fw"
          done

          echo "Verifying app bundle executables at $(date)"
          find "$PKGROOT/usr/local/$APP" -type f -path '*/Contents/MacOS/*' -print0 | \
          while IFS= read -r -d '' f; do
            echo "Verify app binary: $f"
            codesign --verify --strict --verbose=2 "$f"
          done

          echo "Verifying CLI Mach-O executables at $(date)"
          if [ -d "$PKGROOT/usr/local/$APP/bin" ]; then
            find "$PKGROOT/usr/local/$APP/bin" -type f -perm -111 -print0 | \
            while IFS= read -r -d '' f; do
              if file -b "$f" | grep -q 'Mach-O'; then
                echo "Verify CLI: $f"
                codesign --verify --strict --verbose=2 "$f"
              fi
            done
          fi

          echo "Verifying Mach-O dylibs/plugins at $(date)"
          find "$PKGROOT/usr/local/$APP" \( -name '*.dylib' -o -name '*.so' \) -not -path '*/.framework/*' -print0 | \
          while IFS= read -r -d '' f; do
            if file -b "$f" | grep -q 'Mach-O'; then
              echo "Verify dylib/plugin: $f"
              codesign --verify --strict --verbose=2 "$f"
            fi
          done

          echo "Creating package at $(date)"
          mkdir -p "$PKGROOT/usr/local/bin"
          ln -sf /usr/local/Pioneer/pioneer "$PKGROOT/usr/local/bin/pioneer"

          IDENTIFIER=$(jq -r '.identifier' src/build/package_info.json)

          pkgbuild --root "$PKGROOT" \
                   --identifier "$IDENTIFIER" \
                   --version "$VERSION" \
                   --install-location / PioneerUnsigned.pkg

          # Show available identities in the imported keychain (diagnostic)
          security find-identity -v -p codesigning ~/Library/Keychains/signing_temp.keychain-db || true

          echo "Signing package with productsign at $(date)"
          productsign \
            --keychain ~/Library/Keychains/signing_temp.keychain-db \
            --sign "$PKG_SIGN_IDENTITY" \
            PioneerUnsigned.pkg \
            Pioneer-${{ steps.get_version.outputs.version }}-${{ matrix.identifier }}.pkg

          rm PioneerUnsigned.pkg
          echo "Codesigning completed at $(date)"

      - name: Notarize macOS package (release tags only)
        if: github.event_name != 'pull_request' && env.MACOS_CERT_P12 != '' && startsWith(github.ref, 'refs/tags/v')
        timeout-minutes: 240
        env:
          AC_USERNAME: ${{ secrets.NOTARIZE_APPLE_ID }}
          AC_PASSWORD: ${{ secrets.NOTARIZE_PASSWORD }}
          TEAM_ID:    ${{ secrets.NOTARIZE_TEAM_ID }}
        run: |
          echo "Starting notarization at $(date)"
          xcrun notarytool store-credentials notary-profile \
            --apple-id "$AC_USERNAME" --team-id "$TEAM_ID" \
            --password "$AC_PASSWORD"

          echo "Submitting package for notarization at $(date)"
          result=$(xcrun notarytool submit \
                     Pioneer-${{ steps.get_version.outputs.version }}-${{ matrix.identifier }}.pkg \
                     --keychain-profile notary-profile \
                     --wait --output-format json 2>&1) || {
            echo "Notarization command failed or timed out at $(date)"
            echo "Result: $result"
            exit 1
          }

          echo "Notarization completed at $(date)"
          status=$(echo "$result" | jq -r .status)
          subid=$(echo "$result" | jq -r .id)
          echo "Notarization status: $status"
          echo "Submission ID: $subid"

          if [[ "$status" != "Accepted" ]]; then
            echo "Notarization failed: $status"
            xcrun notarytool log "$subid" --keychain-profile notary-profile
            exit 1
          fi
          echo "Notarization successful at $(date)"

      - name: Staple notarization ticket (release tags only)
        if: github.event_name != 'pull_request' && env.MACOS_CERT_P12 != '' && startsWith(github.ref, 'refs/tags/v')
        run: |
          xcrun stapler staple \
            Pioneer-${{ steps.get_version.outputs.version }}-${{ matrix.identifier }}.pkg

      - name: Package zipped binaries
        run: |
          cd build/Pioneer_${{ matrix.identifier }}/Applications
          zip -qr ../../../Pioneer-${{ steps.get_version.outputs.version }}-${{ matrix.identifier }}.zip Pioneer

      - name: Validate signed pkg (release tags only)
        if: github.event_name != 'pull_request' && env.MACOS_CERT_P12 != '' && startsWith(github.ref, 'refs/tags/v')
        run: |
          PKG="Pioneer-${{ steps.get_version.outputs.version }}-${{ matrix.identifier }}.pkg"
          echo "Validating pkg with spctl: $PKG"
          spctl -a -vv -t install "$PKG"

      - name: Upload zipped binaries
        uses: actions/upload-artifact@v4
        with:
          name: Pioneer-${{ matrix.identifier }}
          path: Pioneer-${{ steps.get_version.outputs.version }}-${{ matrix.identifier }}.zip

      - name: Upload signed package (release tags only)
        if: github.event_name != 'pull_request' && env.MACOS_CERT_P12 != '' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: Pioneer-${{ matrix.identifier }}-pkg
          path: Pioneer-${{ steps.get_version.outputs.version }}-${{ matrix.identifier }}.pkg
